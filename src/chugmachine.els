//
// ChugMachine: Parallel non-cooperative processes
//  Spawns N processes to Chug for a random amount of time between A and B.
//  (Note that it creates channels only to catch when the processes finish.
//
let N = 20  in
let A = 100 in // Minimum number of reductions per worker.
let B = 200 in // Max number of reductions per worker.

// WORKER:
let worker_t = fun _.(chug (add A (rand (sub B A)))) in

// MANAGER:
let manager = fun start.(omega fun f,c.(if (leq c 1) 
                                           (worker_t nil) 
                                           (merge (fun _.(f f (dec c))) 
                                                  worker_t ignore)) 
                         start)
in (manager N)
