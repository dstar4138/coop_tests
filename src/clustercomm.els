//
// ClusterComm: Parallel Full-App Communication
//  Simulates unstructured communication accross all processes in the 
//  application. This means N processes are started with M channels, and
//  each process randomly communicates over M channels X times.
//
fun N, // Number of Processes in the system.
    M, // Number of channels for synchronization.
    X. // Number of times each process should synch.
(
    // Channel List setup:
    let nth = (omega fun f,l,s.(if (is_empty l) 
                                   ~1 
                                   (if (leq s 1) // Ones index for simple rchoose.
                                       (head l) 
                                       (f f (tail l) (dec s))))) in
    let chanlist = (omega fun f,l,s.(if (leq s 0) l 
                                    (f f (cons newchan l) (dec s)))
                     newlist M)
    in
    let rswap = fun _.(swap (nth chanlist (rand (count chanlist))) nil) in

    // WORKER:
    let worker_t = fun _.(omega fun f,c.(if (leq c 0) 1 
                                            (ignore (rswap 0) (f f (dec c)))) X) 
    in

    // MAIN FUNCTION:
    (omega fun f,c.(if (leq c 1) 
                       (worker_t nil) 
                       (merge (fun _.(f f (dec c))) worker_t ignore)) 
     N)
)
